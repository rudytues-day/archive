/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ButtondownPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  APIKey: ""
};
var ButtondownPlugin = class extends import_obsidian.Plugin {
  saveDraft(title, body) {
    return __async(this, null, function* () {
      if (!this.settings.APIKey) {
        new import_obsidian.Notice("Please set your API key in the settings!");
        return;
      }
      try {
        const result = yield fetch("https://api.buttondown.email/v1/emails", {
          method: "POST",
          headers: new Headers({
            Authorization: `Token ${this.settings.APIKey}`,
            "Content-Type": "application/json"
          }),
          body: JSON.stringify({
            "body": body,
            "subject": title,
            "status": "draft"
          })
        });
        if (result.ok) {
          new import_obsidian.Notice("Sent draft to Buttondown");
        } else {
          console.error("Error - something went wrong: ", result);
          new import_obsidian.Notice("Something went wrong sending draft to Buttondown. Please check the console for more info");
        }
      } catch (e) {
        console.error("Error - something went wrong: ", e);
        new import_obsidian.Notice("Something went wrong sending draft to Buttondown. Please check the console for more info");
      }
    });
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Loading buttondown plugin");
      yield this.loadSettings();
      this.addCommand({
        id: "note-to-buttondown-draft",
        name: "Create a new Buttondown draft from this note",
        editorCallback: (editor, view) => {
          this.saveDraft(view.file.basename, editor.getValue());
        }
      });
      this.addSettingTab(new SampleSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Buttondown Settings" });
    new import_obsidian.Setting(containerEl).setName("API key").setDesc("Find it at https://buttondown.email/settings#api").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.APIKey).onChange((value) => __async(this, null, function* () {
      value.replace(/-/, "");
      this.plugin.settings.APIKey = value;
      yield this.plugin.saveSettings();
    })));
  }
};

/* nosourcemap */