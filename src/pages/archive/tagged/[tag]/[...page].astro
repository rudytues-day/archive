---
import { getCollection } from "astro:content";
import type { GetStaticPaths } from "astro";

import ArchiveLayout from '../../../../layouts/ArchiveLayout.astro';
import CardPreview from '../../../../components/cards/CardPreview.astro';
import Pagination from "../../../../components/Pagination.astro";

import { slugify } from "../../../../utility/utils";


export const getStaticPaths = ( async ({paginate}) => {
    const entries = await getCollection("entries");
    const allTags = [...new Set(entries.flatMap((entry => 
    entry.data.tags))),];
    return allTags.flatMap((tag) => {
        const taggedEntries = entries.toReversed().filter((entry) =>
            entry.data.tags?.includes(tag)); 
        return paginate(taggedEntries, { 
            pageSize: 9,
            params: { tag: `${slugify(tag)}` },
            props: { tag: tag }
        });
    });
}) satisfies GetStaticPaths;

const { page, tag } = Astro.props;


const pathName = new URL(Astro.request.url).pathname.slice(0, -1);
const titleTag = tag.toUpperCase();

---

<ArchiveLayout title={`WORKS // ENTRIES TAGGED "${titleTag}"`}>

    <h3>ENTRIES TAGGED <span>{tag}</span></h3>
        
        <div class="masonry">
            {
                page.data.map((entry) => 
                <CardPreview 
                    slug={entry.slug}
                    title={entry.data.title}
                    date={entry.data.date}
                    thumb={entry.data.thumb.src}
                    Nsfw={entry.data.Nsfw}
                    Dd={entry.data.Dd}
                    desc={entry.data.desc}
                />
            )}
        </div>

        <Pagination 
            firstUrl={pathName}
            prevUrl={page.url.prev} 
            currentUrl={page.url.current}
            currentPage={page.currentPage}
            nextUrl={page.url.next}
            lastUrl={`${pathName}/${page.lastPage}`}
        />

</Layout>

<style>

    h1 {
        margin: 2em;
        font-family: var(--display);
        text-align: center;
    }

    h3 {
		font-family: var(--display);
        font-size: 1.75rem;
		margin: 1.5em auto 2em auto;
		text-align: center;
	}

    span {
        color: var(--primary-accent-clr)
    }

    .masonry {
        display: grid;
        padding: 0;
        grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
        margin: 3em 2em;
        gap: 0em 1.5em;
        justify-items: center;
        justify-content: center;
        align-items: stretch;
    }

    .masonry > * {
		flex: 1;
	}

</style>