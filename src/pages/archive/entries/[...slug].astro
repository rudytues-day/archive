---
import ArchiveLayout from '../../../layouts/ArchiveLayout.astro';
import CardPreview from '../../../components/cards/CardPreview.astro';
import intersection from 'set.prototype.intersection';

import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import { render } from 'astro:content';
import { slugify, formatDate } from '../../../utility/scripts/format-fxn';

export async function getStaticPaths() {
	const entries = await getCollection("entries");
	return entries.map(entry => {
		return {
			params: { slug: entry.slug },
			props: { 
				entry: entry,
				entries: entries,
				renderContent: entry.render,
				...entry.data
			}
		}
	});
}

const {  
	entry,
	title,
	image,
	date,
	description,
	medium,
	tags,
	entries,
	icons,
	ogimg
} = Astro.props;

const { slug } = Astro.params;

function sortBySimilar(entries) {
	const thisEntryTags = new Set(tags);
	const otherEntries = entries.filter((entry =>
		entry.slug !== slug));
	const otherEntryTags = otherEntries.map((entry) => {
		return new Set(entry.data.tags);
	});
	const similarTagCount = otherEntryTags.map((tagArray) => {
		return intersection(thisEntryTags, tagArray)});
	const slugsAndTags = otherEntries.map((entry, index) => {
		return { slug: entry.slug, tags: similarTagCount[index] };
	});
	const sortedSets = slugsAndTags.sort((a, b) => b.tags.size - a.tags.size);
	const similarEntries = sortedSets.map((set) => {
		const similar = otherEntries.find((entry) => entry.slug === set.slug);
		return similar;
	});
	return similarEntries;
};

const similarEntries = sortBySimilar(entries).slice(0, 5).sort(() => Math.random() - 0.5)

const { Content } = await render(entry)
---

<ArchiveLayout 
	pageTitle=`ARCHIVE / ${title}`
	description={description}
	ogimg={ogimg?.src}
	url=`https://rudytues.day/archive/entries/${slug}`
>

	<div class="card-wrapper entry-card-wrapper">
		<div class="card card-entry">
			<h1 class="card-title">
				<div class="icons">
					{icons.map((icon) => (
						<i class={`fas ${(icon)}`}></i>
					))}
				</div>
				<span>{title}</span>
			</h1>
			<div class="card-body card-entry-body">
				<a href={image.src.src} target="_blank">
					<Image class="full-image"
					src={image.src}
					alt={`${image.alt}`}
					/>
				</a>
				<div class="description">
					<h3 aria-hidden class="text-center">{title}</h3>
					<div class="content-wrapper">
						<Content />
					</div>
					<p><b>{formatDate(date)}<br/>{medium}</b></p>
					<ul class="tags tags-entry">
						{tags.map((tag) => (
							<li><a href={`/archive/tagged/${slugify(tag)}/`}>{tag}</a></li>
						))}
					</ul>
				</div>
			</div>
		</div>
	</div>
	
	<h2>RELATED ENTRIES</h2>

<div class="card-wrapper tile-masonry-wrapper">
	{ similarEntries.slice(0, 3).map(async (entry) => {
		const { Content } = await render(entry);
		return (
			<CardPreview
				slug={entry.slug}
				title={entry.data.title}
				date={entry.data.date}
				thumb={entry.data.thumb.src}
				Nsfw={entry.data.Nsfw}
				Dd={entry.data.Dd}
			>
				<Content />
			</CardPreview>
		)}
	)}
</div>

</ArchiveLayout>

<style>
	
	.full-image {
		margin-block: 1em;
		display: block;
		height: auto;
		max-height: 80vh;
		width: auto;
	}

	h2 {
		margin-block: 2em 1em;
	}

	.content-wrapper {
		max-width: 60ch;
		text-wrap: pretty;
		margin: 2em auto;
	}

	.tile-masonry-wrapper {
		margin-bottom: 6em;
	}

</style>
