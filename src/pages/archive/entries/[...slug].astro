---
import ArchiveLayout from '../../../layouts/ArchiveLayout.astro';
import CardPreview from '../../../components/cards/CardPreview.astro';
import intersection from 'set.prototype.intersection';

import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import { slugify, formatDate } from '../../../utility/scripts/format-fxn';

// import '../../../utility/styles/card-styles.css'

export async function getStaticPaths() {
	const entries = await getCollection("entries");
	return entries.map(entry => {
		return {
			params: { slug: entry.slug },
			props: { 
				entries: entries,
				renderContent: entry.render,
				...entry.data
			 }
		}
	});
}

const {  
	title,
	image,
	date,
	Nsfw,
	uploadDate,
	Dd,
	desc,
	medium,
	tags,
	entries,
	icons,
} = Astro.props;

const { slug } = Astro.params;

function sortBySimilar(entries) {
	const thisEntryTags = new Set(tags);
	const otherEntries = entries.filter((entry =>
		entry.slug !== slug));
	const otherEntryTags = otherEntries.map((entry) => {
		return new Set(entry.data.tags);
	});
	const similarTagCount = otherEntryTags.map((tagArray) => {
		return intersection(thisEntryTags, tagArray)});
	const slugsAndTags = otherEntries.map((entry, index) => {
		return { slug: entry.slug, tags: similarTagCount[index] };
	});
	const sortedSets = slugsAndTags.sort((a, b) => b.tags.size - a.tags.size);
	const similarEntries = sortedSets.map((set) => {
		const similar = otherEntries.find((entry) => entry.slug === set.slug);
		return similar;
	});
	return similarEntries;
};

const similarEntries = sortBySimilar(entries).slice(0, 5).sort(() => Math.random() - 0.5)

---

<ArchiveLayout pageTitle=`ARCHIVE / ${title}`>

	<div class="card-wrapper entry-card-wrapper">
		<div class="card card-entry">
			<h1 class="card-title card-entry-title">
				<div class="icons">
					{icons.toReversed().map((icon) => (
						<i class={`fas ${(icon)}`}></i>
					))}
				</div>
				<span>{title}</span>
				<div class="icons">
					{icons.map((icon) => (
						<i class={`fas ${(icon)}`}></i>
					))}
				</div>
			</h1>
			<div class="card-body card-entry-body">
				<a href={image.src.src} target="_blank">
					<Image class="full-image"
					src={image.src}
					alt={`${image.alt}`}
					/>
				</a>
				<div class="description">
					<p>{desc}</p>
					<p><b>{formatDate(date)}<br/>{medium}</b></p>
					<ul class="tags">
						{tags.map((tag) => (
							<li><a href={`/archive/tagged/${slugify(tag)}/`}>{tag}</a></li>
						))}
					</ul>
				</div>
			</div>
		</div>
	</div>
	
	<h2>RELATED ENTRIES</h2>

	<div class="card-wrapper tile-masonry-wrapper">
		{ similarEntries.slice(0, 3).map((entry) =>
			<CardPreview
				slug={entry.slug}
				title={entry.data.title}
				date={entry.data.date}
				thumb={entry.data.thumb.src}
				desc={entry.data.desc}
				Nsfw={entry.data.Nsfw}
				Dd={entry.data.Dd}
				/>
		)}
	</div>

</ArchiveLayout>

<style>
	
	.full-image {
		/* margin: 2em 1em; */
		display: block;
		height: auto;
		max-height: 80vh;
		width: auto;
	}

	/* temp fix */

	h2 {
		text-align: center;
		font-size: 1.75rem;
		margin-block: 2em 1em;
	}

	.description {
		text-align: center;
		margin-bottom:
	}
	
@media all and (min-width: 700px) {}
	
@media all and (min-width: 1000px) {}

@media all and (min-width: 1200px) {}

</style>
