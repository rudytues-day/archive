---
import ArchiveLayout from '../../../layouts/ArchiveLayout.astro';
import CardPreview from '../../../components/cards/CardPreview.astro';
import intersection from 'set.prototype.intersection';

import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import { slugify, formatDate } from '../../../utility/scripts/format-fxn';

export async function getStaticPaths() {
	const entries = await getCollection("entries");
	return entries.map(entry => {
		return {
			params: { slug: entry.slug },
			props: { 
				entries: entries,
				renderContent: entry.render,
				...entry.data
			 }
		}
	});
}

const {  
	title,
	image,
	date,
	Nsfw,
	uploadDate,
	Dd,
	desc,
	medium,
	tags,
	entries,
	icons,
} = Astro.props;

const { slug } = Astro.params;

function sortBySimilar(entries) {
	const thisEntryTags = new Set(tags);
	const otherEntries = entries.filter((entry =>
		entry.slug !== slug));
	const otherEntryTags = otherEntries.map((entry) => {
		return new Set(entry.data.tags);
	});
	const similarTagCount = otherEntryTags.map((tagArray) => {
		return intersection(thisEntryTags, tagArray)});
	const slugsAndTags = otherEntries.map((entry, index) => {
		return { slug: entry.slug, tags: similarTagCount[index] };
	});
	const sortedSets = slugsAndTags.sort((a, b) => b.tags.size - a.tags.size);
	const similarEntries = sortedSets.map((set) => {
		const similar = otherEntries.find((entry) => entry.slug === set.slug);
		return similar;
	});
	return similarEntries;
};

const similarEntries = sortBySimilar(entries).slice(0, 5).sort(() => Math.random() - 0.5)

---

<ArchiveLayout pageTitle=`ARCHIVE / ${title}`>

	<div class="card-wrapper">
		<div class="card">
			<h2>
				<div class="icons">
					{icons.toReversed().map((icon) => (
						<i class={`fas ${(icon)}`}></i>
					))}
				</div>
				<span>{title}</span>
				<div class="icons">
					{icons.map((icon) => (
						<i class={`fas ${(icon)}`}></i>
					))}
				</div>
			</h2>
			<div class="body">
					<a href={image.src.src} target="_blank">
						<Image class="full-image"
						src={image.src}
						alt={`${image.alt}`}
						/>
					</a>
				<div class="date">
					<b>{formatDate(date)}</b>
					<div class="icons">
						{ Nsfw && <i class="fas fa-ban" role="img" aria-label="nsfw"></i> }
						{ Dd && <i class="fas fa-feather" role="img" aria-label="dead dove"></i>}
					</div>
					<b>{medium}</b>
				</div>
				<div class="description">
					<p class="text">{desc}</p>
					<ul class="tags">
						{tags.map((tag) => (
							<li><a href={`/works/archive/tagged/${slugify(tag)}/`}>{tag}</a></li>
						))}
					</ul>
				</div>
			</div>
		</div>
	</div>
	
	<h3>RELATED ENTRIES</h3>

	<div class="card-masonry">
		{ similarEntries.slice(0, 3).map((entry) =>
			<CardPreview
				slug={entry.slug}
				title={entry.data.title}
				date={entry.data.date}
				thumb={entry.data.thumb.src}
				desc={entry.data.desc}
				Nsfw={entry.data.Nsfw}
				Dd={entry.data.Dd}
				/>
		)}
	</div>

</ArchiveLayout>

<style>

	h3 {
		font-family: var(--display);
		text-align: center;
		margin-block: 2em;
		font-size: 1.75rem;
	}
	
	.card {
		margin: 3em 1em;
		max-width: 800px;
		vertical-align: top;
	}

	.body {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.full-image {
		margin: 2em 1em;
		height: auto;
		max-height: 80vh;
		width: auto;
	}

	.icons i {
		margin-inline: 0.125em;
	}
	
	h2 {
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.5rem;
		background-color: var(--primary-clr-dark);
		padding: 0.5em;
		color: var(--white-clr);
		border-radius: 0.75em 0.75em 0em 0em;
		transition: ease 0.2s;
		font-family: var(--display);
		font-weight: normal;
		gap: 0.7em;
	}

	h2 i {
		font-size: 0.8em
	}

	b {
		font-family: var(--display);
		text-transform: uppercase;
		font-weight: normal;
		font-size: 1.25em;
	}
	
	ul {
		padding: 0;
		margin: auto;
	}
	
	.date {
		margin: auto;
		display: flex;
		gap: 1em;
	}

	.date i {
		padding-top: 0.7em;
	}
	
	.body {
		padding: 1em;
		border: solid 2px var(--primary-clr-dark);		
		border-radius: 0em 0em 1em 1em;
	}

	.description {
		margin: 1.5em auto;
		max-width: 600px;
		display: grid;
		gap: 1.5em;
		text-wrap: balance;
	}
	
	.text {
		text-align: center;
	}
	
	.thumb {
		list-style: none;
		padding: 0;
		height: 100px;
		width: 100px;
		background-color: var(--primary-clr-dark);
		border-radius: 10px;
	}
	
	.tags {
		display: flex;
		flex-flow: row wrap;
		list-style: none;
		padding: 0;
		margin: auto;
		gap: 0.25em;
		justify-content: center;
		max-width: 500px;
	}
	
	.tags li {
		background-color: var(--primary-clr-dark);
		color: var(--white-clr);
		font-family: var(--display);
		text-transform: uppercase;
		padding: 0.125em 0.3em 0.4em 0.3em;
		line-height: 1;
		border-radius: 0.25em;
		transition: ease 0.2s;
	}
	
	.tags li:hover {
		color: var(--primary-accent-clr)
	}

	p a {
		font-weight: bold;
		color: var(--primary-link-clr)
	}

	.card-masonry {
		margin: 4em auto;
		display: flex;
		flex-wrap: wrap;
		flex-direction: row;
		justify-content: center;
		align-items: stretch;
		gap: 1.5em;
	}
	
	@media all and (min-width: 700px) {
		
		main {
			margin: auto;
		}

		.card-wrapper {
		padding-inline: 1em;
	}

		ul {
			margin: 1em;
		}

		.card {
			margin-inline: auto;
		}

		.card-masonry {
			grid-template-columns: repeat(2, 1fr);
			gap: 1em;
		}
		
	}
	
	@media all and (min-width: 1000px) {
		
		.card-masonry {
			grid-template-columns: repeat(3, 1fr);
		}
		
	}

@media all and (min-width: 1200px) {
		
	.card-masonry {
		display: grid;
		padding: 0;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		margin: 3em 2em;
		gap: 0em 1.5em;
		justify-items: center;
		justify-content: center;
		align-items: stretch;
	}
	
}

</style>
