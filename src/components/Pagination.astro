---
export type RouteString = string | null | undefined

interface Props {
  firstUrl?: RouteString
  prevUrl?: RouteString
  nextUrl?: RouteString
  lastUrl?: RouteString
  currentPage?: string | number
  currentUrl?: RouteString
}

const {
  firstUrl,
  prevUrl,
  nextUrl,
  currentUrl,
  lastUrl,
  currentPage = "1",
} = Astro.props

---

<nav>
        
    {
        firstUrl == currentUrl || currentPage == 1 ? (
            <i class="fas fa-angle-double-left disabled"></i>    
        ) : (
            <a href={firstUrl}><i class="fas fa-angle-double-left" role="img" aria-label="first page"></i></a>
    )}
    
    {
        prevUrl ? (
            <a href={prevUrl}><i class="fas fa-angle-left" role="img" aria-label="previous page"></i></a>     
        ) : (
            <i class="fas fa-angle-left disabled"></i>
    )}

    <span>{ currentPage == 1 && !nextUrl ? ("") : (currentPage) }</span>

    {
        nextUrl ? (
            <a href={nextUrl}><i class="fas fa-angle-right" role="img" aria-label="next page"></i></a>
        ) : (
            <i class="fas fa-angle-right disabled"></i>
    )}

    {
        lastUrl == currentUrl || !nextUrl ? (
            <i class="fas fa-angle-double-right disabled"></i>
        ) : (
            <a href={lastUrl}><i class="fas fa-angle-double-right" role="img" aria-label="last page"></i></a> 
    )}

</nav>


<style>

    nav {
        font-family: var(--display);
        margin: 3em auto 4em auto;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1em;
    }

    i {
        font-size: 1.125rem;
        padding-top: 0.625em;
        font-weight: bold;
    }

    span {
        font-size: 1.5rem;
    }

    nav a {
        transition: var(--link-transition);
    }

    nav a:hover {
        color: var(--primary-accent-clr)
    }

    .disabled {
        opacity: 0;
    }

</style>