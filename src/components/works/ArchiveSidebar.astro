---
import { getCollection } from "astro:content";
import { slugify, formatDate, sortByUploadDate } from "../utility/utils";

const entries = await getCollection("entries");

// sort tags by frequency

const allEntryTags = entries.map((entry => 
	entry.data.tags)).reduce((accumulator, value) => accumulator.concat(value), [])

let frequency = {}
allEntryTags.forEach(tag => {
	if (frequency[tag]) {
		frequency[tag]++;}
	else {frequency[tag] = 1}
})

function sortByFrequency(a, b) {
	return frequency[a] - frequency[b];
}

const sortedTags = [... new Set(allEntryTags.sort(sortByFrequency).toReversed().flat())];

---

<aside>

	<div class="filters">
		<h2>FILTERS</h2>
				<!-- <span>the future home of filters</span> -->
			<div class="filter-wrapper">
				<fieldset id="rating">
					<legend>RATING</legend>
					<div class="form-flex">
						<div class="wrapper">
							<input type="checkbox" id="baby" name="baby" value="baby" checked>
							<label for="baby"><i class="fas fa-baby" role="img" aria-label="baby mode"></i></label>
						</div>
						<div class="wrapper">
							<input type="checkbox" id="nsfw" name="nsfw" value="nsfw" checked>
							<label for="nsfw"><i class="fas fa-ban" role="img" aria-label="adult content"></i></label>
						</div>
						<div class="wrapper">
							<input type="checkbox" id="dd" name="dd" value="dd" checked>
							<label for="dd"><i class="fas fa-feather" role="img" aria-label="dead dove"></i></label>
						</div>
					</div>
				</fieldset>
				<!-- <fieldset id="medium">
					<legend>MEDIUM</legend>
						<div class="wrapper">
							<input type="checkbox" id="analog" name="analog" value="analog" checked>
							<label for="analog" checked>ANALOG</label>
						</div>
						<div class="wrapper">
							<input type="checkbox" id="digital" name="digital" value="digital" checked>
							<label for="digital">DIGITAL</label>
						</div>
				</fieldset> -->
				<fieldset id="sort">
					<legend>SORT BY</legend>
						<div class="wrapper">
							<input type="radio" id="newest" name="sort" value="newest" checked>
							<label for="newest">NEWEST</label>
						</div>
						<div class="wrapper">
							<input type="radio" id="oldest" name="sort" value="oldest">
							<label for="oldest">OLDEST</label>
						</div>
						<div class="wrapper">
						</div>
				</fieldset>
			</div>

	</div>

	<div class="uploads">
        <h2>RECENT UPLOADS</h2>
        <ul class="scrollbox">
            {
                entries.sort(sortByUploadDate).map((entry) =>
                <li>
                    <a href={`/archive/entries/${entry.slug}/`}><b>{formatDate(entry.data.date)}</b> : {entry.data.title}
						<div class="icons">
                                { entry.data.Nsfw && <i class="fas fa-ban" role="img" aria-label="adult content"></i> }
                                { entry.data.Dd && <i class="fas fa-feather" role="img" aria-label="dead dove"></i> }
								{ entry.data.uploadDate < new Date("2023-12-01") && <i class="fas fa-sparkles" role="img" aria-label="dead dove"></i> }
                        </div>
                    </a>
                </li>
                )
            }
        </ul>
    </div>
	
	<div class="tags">
		<h2>TAGS</h2>
		<ul>
			{sortedTags.map(tag => (
				<li><a href={`/archive/tagged/${slugify(tag)}/`}>{tag}</a></li>
			))
			}
		</ul>
	</div>

</aside>

<style>

	.filter-wrapper {
		display: grid;
		grid-template-areas:
			'rating rating'
			'sort med';
			gap: 1em;
		margin: 2em 1em;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	#medium legend,
	#sort legend {
		margin: auto;
	}

	#rating {
		grid-area: rating;
	}

	#medium {
		grid-area: med;
	}

	#sort {
		grid-area: sort;
	}


	fieldset {
		margin: 1em;
		margin: auto;
		padding: 1em 1.5em 1.75em 1.5em;
		border-radius: 0.5em;
		border: 2px solid var(--primary-clr-med);
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}
	
	legend {
		margin-left: 0.5em;
		font-family: var(--display);
		font-size: 1.5rem;
	}

	.form-flex {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 1.5em;
		padding: 0.5em 1em;
	}

	/* #medium, */
	#sort {
		font-family: var(--display);
		font-size: 1.25rem;
	}

	.filters .fas {
		font-size: 1.75rem;
	}

	input[type="checkbox"],
	input[type="radio"] {
		height: 0;
		width: 0;
		margin: 0;
		padding: 0;
		position: absolute;
		opacity: 0;
	}

	label {
		color: var(--primary-clr-light);
		opacity: 40%;
		transition: 0.2s;
	}

	label:hover{
		color: var(--primary-accent-clr);
		opacity: 100%;
	}
	
	input[type="checkbox"]:checked + label,
	input[type="radio"]:checked + label {
		color: #fff;
		opacity: 100%;
	}

	input[type="checkbox"]:checked + .fa-feather {
		color: var(--primary-clr-light);
	}

	input[type="checkbox"]:checked + .fa-ban {
		color: var(--primary-accent-clr);
	}

	b {
		font-family: var(--display);
		font-weight: normal;
	}

	aside {
		background-color: #111;
		color: var(--white-clr);
		min-width: 100%;
	}

	aside > * {
		margin: 5em 1em;
	}

	/* .search {
		text-align: center;
	}

	.search-form {
		margin: 2em auto 3em auto;
	}

	#search {
		background-color: var(--primary-clr-med);
		border-radius: 1em;
		margin: 1em 0.75em;
		color: inherit;
		width: 275px;
		font-style: italic;
		padding-inline: 0.75em;
		border-color: var(--primary-clr-med);
	}

	#search:focus {
		border-color: var(--primary-accent-clr);
	}

	.search-wrapper {
		display: flex;
		align-items: center;
		justify-content: center;
	} */

	button {
		color: var(--white-clr);
		border: none;
		background-color: var(--primary-clr-dark);
		padding: 0;
		font-size: 1.1rem;
		transition: 200ms;
		cursor: pointer;
	}

	button:hover,
	button:focus {
		color: var(--primary-accent-clr)
	}

	h2 {
		color: var(--white-clr);
		font-family: var(--display);
		text-align: center;
		margin-bottom: 1em;
	}

    .tags ul {
		display: flex;
		flex-flow: row wrap;
		list-style: none;
		padding: 0;
		gap: 0.4em;
        justify-content: center;
        margin: 2em;
	}

    .tags li {
		background-color: var(--primary-clr-med);
		color: var(--white-clr);
		font-family: var(--display);
		text-transform: uppercase;
		padding: 0.125em 0.3em 0.4em 0.3em;
		line-height: 1;
		border-radius: 0.25em;
		transition: ease 0.2s;
	}

	li a {
		transition: 200ms;
	}

	li a:hover {
		color: var(--primary-accent-clr)
	}

	.scrollbox {
		background: var(--primary-clr-med);
		overflow: scroll;
		overflow-x: hidden;
		text-wrap: wrap;
		height: 278px;
		list-style: none;
		margin: 3em 1em;
		padding: 0.25em 0.5em;
		text-align: left;
		border-radius: 0.5em;
	}

	.scrollbox li {
		margin: 0.25em;
		border-bottom: 1px dotted #fff;
	}

	.icons {
		display: inline-block;
		font-size: 0.9rem;
		padding: 0em 0.25em;
	}

	.scrollbox i {
		margin: 0em 0.125em;

	}

	@media all and (min-width: 800px) {
		aside {
			display: grid;
			grid-template-areas: 
				'filters uploads'
				'tags tags';
				grid-template-columns: 1fr 1fr;
			padding: 4em 1em 2em 1em;
			row-gap: 2em;
		}

		aside > * {
			margin: 0;
		}

		.uploads {
			grid-area: uploads;
			padding-inline: 2em;
		}

		.filters {
			grid-area: filters;
			margin-inline: 3em;
			

		}

		.wrapper {

		}

		.tags {
			grid-area: tags;
		}

	}

	@media all and (min-width: 1000px) {

		aside {
			padding-block: 0;
			display: block;
			row-gap: 0;
		}

		aside > * {
			margin-block: 5em;
		}

	}

</style>

