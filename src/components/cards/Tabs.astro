---
import type { HTMLAttributes } from 'astro/types';

interface Props {
  tabTitle: string;
  index: number;
  firstChecked?: boolean;
  tabTitleClasses?: string;
}

const {
   tabTitle,
   index,
   firstChecked = false,
   tabTitleClasses = ''
} = Astro.props;
---

<button
   aria-controls={String(index)}
   role="tab"
   class:list={['tab-wrapper', `tab-${index}`, 'btn-blue', tabTitleClasses]}
>
   {
      firstChecked ? (
         <input
            autofocus="false"
            tabindex="-1"
            aria-hidden="true"
            class={`radio-tab radio-tab-${index}`}
            type="radio"
            checked
            name="radio-tab-input"
            id={`radio-tab-input-${index}`}
         />
      ) : (
         <input
            autofocus="false"
            tabindex="-1"
            aria-hidden="true"
            class={`radio-tab radio-tab-${index}`}
            type="radio"
            name="radio-tab-input"
            id={`radio-tab-input-${index}`}
         />
      )
   }
   <label
      class="tab tab-label"
      for={`radio-tab-input-${index}`}
   >
      {tabTitle}
   </label>

<div class="tab-folder">

    <div role="tablist" aria-label="tabs">

        <button
            role="tab"
            aria-selected="true"
            aria-controls="panel-1"
            id="tab-1"
            tabindex="0"
        > WEB DEV
        </button>

        <button
            role="tab"
            aria-selected="false"
            aria-controls="panel-2"
            id="tab-2"
            tabindex="-1"
        > ART & COMICS
        </button>
        
    </div>

    <div 
        id="panel-1" 
        role="tabpanel" 
        tabindex="0" 
        aria-labelledby="tab-1">
        <div class="">
            <h1>GETTING STARTED</h1>
            <ul class="card-list">
                <li><a href="">nero's personal website guide</a></li>
                <li><a href="">sadgrl.online</a></li>
            </ul>

            <h1>TEST</h1>
            <ul class="card-list">
                <li><a href="">nero's personal website guide</a></li>
                <li><a href="">sadgrl.online</a></li>
            </ul>

        </div>
    </div>

    <div
        id="panel-2"
        role="tabpanel"
        tabindex="0"
        aria-labelledby="tab-2"
        hidden >
        <div class="">
            <h1>COLOR THEORY</h1>
            <ul class="card-list">
                <li><a href="">nero's personal website guide</a></li>
                <li><a href="">sadgrl.online</a></li>
            </ul>
        </div>
    </div>

    <div 
        id="panel-3" 
        role="tabpanel" 
        tabindex="0" 
        aria-labelledby="tab-3" 
        hidden >
        <div class="">
            <h1>TEST3</h1>
        </div>
    </div>
</div>
</section>


<script>
    // window.addEventListener("DOMContentLoaded", () => {
    //     const tabList = document.querySelector('[role="tablist"]');
    //     const tabs = tabList!.querySelectorAll(':scope > [role="tab"]');

    // // Add a click event handler to each tab
    //     tabs.forEach((tab) => {
    //         tab.addEventListener("click", changeTabs);
    //     });

    // // Enable arrow navigation between tabs in the tab list
    // // if read hash switch to specific tab
    // // s 
    // // check
    //     let tabFocus = 0;
    //     // 
    //     tabList!.addEventListener("keydown", (e) => {
    //         // Move right
    //         let keyboardEvent = (e as KeyboardEvent);
    //         if (keyboardEvent.key === "ArrowRight" || keyboardEvent.key === "ArrowLeft") {
    //             tabs[tabFocus].setAttribute("tabindex", "-1");
    //             if (keyboardEvent.key === "ArrowRight") {
    //                 tabFocus++;
    //             // If we're at the end, go to the start
    //                 if (tabFocus >= tabs.length) {
    //                     tabFocus = 0;
    //                 }
    //             // Move left
    //         } else if (keyboardEvent.key === "ArrowLeft") {
    //             tabFocus--;
    //             // If we're at the start, move to the end
    //             if (tabFocus < 0) {
    //             tabFocus = tabs.length - 1;
    //             }
    //         }

    //         tabs[tabFocus].setAttribute("tabindex", "0");
    //         (tabs[tabFocus] as HTMLElement).focus();
    //         }
    //     });

    // function changeTabs() {
    //     const targetTab = e.target;
        
    //     const tabList = targetTab.parentNode;
    //     const tabGroup = tabList.parentNode;

    // // Remove all current selected tabs
    //     tabList
    //         .querySelectorAll(':scope > [aria-selected="true"]')
    //         .forEach((t) => t.setAttribute("aria-selected", false));

    // // Set this tab as selected
    //     targetTab.setAttribute("aria-selected", true);

    // // Hide all tab panels
    //     tabGroup
    //         .querySelectorAll(':scope > [role="tabpanel"]')
    //         .forEach((p) => p.setAttribute("hidden", true));

    // // Show the selected panel
    //     tabGroup
    //         .querySelector(`#${targetTab.getAttribute("aria-controls")}`)
    //         .removeAttribute("hidden");

    //     }
        
    // })
</script>
