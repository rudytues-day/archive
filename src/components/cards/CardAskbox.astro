---
interface Props {
    slug: string;
	user?: string;
	date?: Date;
    tags?: Array<string>;
}

const { slug, date, user, tags } = Astro.props as Props;

import '../../utility/styles/tag-styles.css'
import '../../utility/styles/main-styles.css'
import '../../utility/styles/card-styles.css'
import '../../utility/styles/form-styles.css'

import { formatDate, slugify } from '../../utility/scripts/format-fxn';
---

<div class="card card-askbox">
    <a href={`/askbox/question/${slug}/`}>
    <h1 class="card-title">
        <span>
            { user ?
                <i class="fas fa-user"></i> <span>{user}</span> :
                <i class="fas fa-user-secret"></i> <span>[REDACTED]</span>
            }
        </span>
        <span>{formatDate(date)} <i class="fas fa-arrow-up-right-from-square"></i>
        </span>
    </h1>
</a>
    <div class="card-body">

        <div class="answer">
            <slot />
        </div>
        { tags &&
            <ul class="tags tag-cloud tag-cloud-askbox">
                {tags.map((tag) => (
                    <li class="tag"><a href={`/askbox/tagged/${slugify(tag)}`}>{tag}</a></li>
                ))}
            </ul>
        }
    </div>
</div>

<style>

    .card-body {
        display: grid;
        gap: 0.125em;
        align-items: start;
    }

    .answer {
        margin: 0em auto 1em auto;
        position: relative;
        width: 100%;
    }

    .answer.collapsed {
        max-height: 250px;
        overflow: hidden;
    }

    .answer.collapsed:before {
        content:'';
        width:100%;
        height:100%;    
        position:absolute;
        left: 0;
        top: 0;
        background: linear-gradient(transparent 40%, white);
    }


    .read-more {
        /* position: absolute; */
        display: block;
        margin: auto;
        text-align: center;
        /* align-self: center; */
    }

    .collapsed {

    }

    .fa-arrow-up-right-from-square {
        margin-inline: 0.25em 0em;
    }

    h1:hover {
        color: var(--primary-accent-clr)
    }

</style>

<script>

const answers = document.querySelectorAll(".answer");

answers.forEach((answer) => {
if (answer.getBoundingClientRect().height > 250) {
    answer.classList.add("collapsed");
        let readMoreBtn = document.createElement("button");
        readMoreBtn.textContent = "READ MORE"; 
        readMoreBtn.classList.add("read-more");
        answer.parentNode?.insertBefore(readMoreBtn, answer.nextSibling);
    };
});

const readMoreBtns = document.querySelectorAll("button");

readMoreBtns?.forEach((button) => {
    button?.addEventListener("click", () => {
        let answerCollapse = button.closest("div")?.querySelector(".answer");
        const collapse = answerCollapse?.classList.toggle("collapsed");
        button.textContent = collapse ? "READ MORE" : "CLOSE";
    })
});

</script>